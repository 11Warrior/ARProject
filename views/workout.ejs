<%- include('header') %>
<body class="bg-zinc-900 min-h-screen">
  <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
  <script src="/js/camera_utils.js"></script>
  <!-- Require the peer dependencies of pose-detection. -->
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-converter"></script>

  <!-- You must explicitly require a TF.js backend if you're not using the TF.js union bundle. -->
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-webgl"></script>
  <!-- Alternatively you can use the WASM backend: <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm/dist/tf-backend-wasm.js"></script> -->

  <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/pose-detection"></script>
  <script src="/js/Sketcher.js"></script>
  <script src="/js/AREngine.js"></script>
  <script src="/js/AREngineBuilder.js"></script>

  <style>
    .exercise-demo {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      min-width: 300px;
    }
    .exercise-demo img {
      max-width: 100%;
      max-height: 400px;
    }
    .ar-container {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      min-width: 300px;
      position: relative;
    }
    #user-video {
      width: 100%;
      height: 100%;
      max-width: 480px;
      max-height: 400px;
      background: #222;
    }
    #user-canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
    }
    .info-row {
      display: flex;
      justify-content: center;
      margin-top: 30px;
      gap: 40px;
    }
    .info-box {
      border: 2px solid #d32f2f;
      padding: 8px 18px;
      background: #111827;
      color: #fff;
      font-size: 1.2rem;
      border-radius: 4px;
      min-width: 120px;
      text-align: center;
    }
    .info-label {
      font-weight: bold;
      color: #d32f2f;
      margin-bottom: 2px;
      display: block;
    }
    .info-message {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(255,255,255,0.9);
      padding: 10px 20px;
      border-radius: 8px;
      font-size: 1.2rem;
      color: #fff;
    }
  </style>
  <div class=" main h-full w-full bg-zinc-900">
    <div class="workout-main-container flex items-center justify-center mt-5">
    <div class="exercise-demo">
      <img class="w-150 h-120 object-cover object-center" src="/images/<%= workoutType %>.gif" alt="Exercise Demo" />
    </div>
    <div class="ar-container">
      <video id="user-video"></video>
      <canvas id="user-canvas"></canvas>
      <div class="info-message"> Initializing.....</div>
    </div>
  </div>

  <div class="info-row">
    <!-- <div class="info-box">
      <span class="info-label">Current Step:</span>
      <span id="current-step">1</span>
    </div>
    <div class="info-box">
      <span class="info-label">Next Step:</span>
      <span id="next-step">0</span>
    </div> -->
    <div class="info-box">
      <span class="info-label">Your visibility:</span>
      <span id="user-visibility">visible</span>
    </div>
    <div class="info-box">
      <span class="info-label">Reps:</span>
      <span id="reps">0</span>
    </div>
  </div>
  </div>

  <script>
    const workoutType = '<%= workoutType %>';
    
    navigator.mediaDevices
      .getUserMedia({
        video: {
          width: { ideal: 640 },
          height: { ideal: 480 }
        },
        audio: false,
      })
      .then((stream) => {
        var video = $('#user-video').get(0)
        video.srcObject = stream;
        video.onloadedmetadata = function (e) {
          video.play();
          var ARWorkout = new ARWorkoutEngineBuilder()
            .addUserVideo(video)
            .addUserStream(stream)
            .addUserCanvas($('#user-canvas').get(0))
            .addWorkoutType(workoutType)
            .build()
        };
      })
    $(document).ready(function () {
      $('body').on('model-loaded', function () {
        $('.info-message').hide()
      })
    })
    // TODO: Replace the following with real-time updates from your AR engine
    // Example: update step, next step, visibility, reps
    // $('#current-step').text(...);
    // $('#next-step').text(...);
    // $('#user-visibility').text(...);
    // $('#reps').text(...);

    // Example: Increment reps when a rep is detected
    let reps = 0;

    // This function should be called by your AR engine when a rep is detected
    function incrementReps() {
      reps += 1;
      $('#reps').text(reps);
    }

    // Example: Simulate reps for testing
    // setInterval(incrementReps, 2000); // Uncomment to test incrementing every 2 seconds

    // In your AR engine, call incrementReps() whenever a rep is detected
  </script>
  <%- include('footer') %>
</body>